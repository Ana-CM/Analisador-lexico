/* The following code was generated by JFlex 1.7.0 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lang.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\26\1\25\1\2\1\30\1\30\1\1\22\0\1\3\1\52"+
    "\3\0\1\56\1\57\1\24\1\37\1\40\1\54\1\53\1\50\1\27"+
    "\1\5\1\55\12\4\1\36\1\47\1\46\1\51\1\45\2\0\32\23"+
    "\1\41\1\26\1\42\1\0\1\21\1\0\1\13\2\17\1\35\1\11"+
    "\1\12\2\17\1\33\2\17\1\14\1\17\1\31\1\17\1\34\1\17"+
    "\1\7\1\15\1\6\1\10\1\17\1\32\3\17\1\43\1\0\1\44"+
    "\7\0\1\30\32\0\1\3\11\0\1\17\12\0\1\17\4\0\1\17"+
    "\5\0\27\23\1\0\7\23\30\17\1\0\10\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\2\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\2\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\2\23\1\17\1\23\1\17\1\23"+
    "\3\17\2\23\1\17\1\23\1\17\2\23\1\17\3\23\2\17\4\23"+
    "\1\17\2\23\1\17\3\23\3\17\2\23\1\17\2\23\1\17\1\23"+
    "\1\17\1\23\1\17\2\23\1\17\1\23\2\17\1\23\1\17\2\23"+
    "\1\17\3\23\1\17\1\23\1\17\2\23\2\17\1\20\1\23\3\17"+
    "\4\20\1\23\1\20\1\17\1\23\1\20\1\17\1\23\1\20\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\2\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\2\17\1\23\1\20\1\17\1\23\1\17\3\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\7\17\2\23"+
    "\1\17\2\23\2\17\1\23\1\17\4\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\105\17\1\20\44\17\7\20\2\17\4\0"+
    "\14\20\16\0\5\17\7\0\1\20\1\0\1\20\126\0\1\16\52\0"+
    "\1\23\1\17\1\23\1\17\1\20\1\0\1\23\1\17\2\0\4\17"+
    "\1\0\1\23\6\0\1\23\1\0\3\23\1\0\1\23\1\0\2\23"+
    "\1\17\21\23\1\0\11\23\43\17\1\23\2\17\3\23\3\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\5\17\1\23\1\17\1\0\1\23\1\17\2\23\2\17"+
    "\63\23\60\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\10\0\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\2\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\2\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\0\46\23\2\0\1\20\7\0\47\17\110\0\33\20\5\0"+
    "\3\20\55\0\53\20\25\0\12\4\4\0\2\20\1\0\143\20\1\0"+
    "\1\20\17\0\2\20\7\0\2\20\12\4\3\20\2\0\1\20\20\0"+
    "\1\20\1\0\36\20\35\0\131\20\13\0\1\20\16\0\12\4\41\20"+
    "\11\0\2\20\4\0\1\20\5\0\26\20\4\0\1\20\11\0\1\20"+
    "\3\0\1\20\27\0\31\20\107\0\25\20\1\0\10\20\106\0\66\20"+
    "\3\0\1\20\22\0\1\20\7\0\12\20\4\0\12\4\1\0\20\20"+
    "\4\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20"+
    "\3\0\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1\0\3\20"+
    "\4\0\12\4\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0"+
    "\1\20\7\0\12\4\2\0\3\20\20\0\11\20\1\0\3\20\1\0"+
    "\26\20\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0"+
    "\1\20\17\0\2\20\4\0\12\4\11\0\1\20\13\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\3\0"+
    "\1\20\36\0\2\20\1\0\3\20\4\0\12\4\1\0\1\20\21\0"+
    "\1\20\1\0\6\20\3\0\3\20\1\0\4\20\3\0\2\20\1\0"+
    "\1\20\1\0\2\20\3\0\2\20\3\0\3\20\3\0\14\20\26\0"+
    "\1\20\25\0\12\4\25\0\10\20\1\0\3\20\1\0\27\20\1\0"+
    "\20\20\3\0\1\20\32\0\3\20\5\0\2\20\4\0\12\4\20\0"+
    "\1\20\4\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0"+
    "\5\20\3\0\1\20\40\0\1\20\1\0\2\20\4\0\12\4\1\0"+
    "\2\20\22\0\10\20\1\0\3\20\1\0\51\20\2\0\1\20\20\0"+
    "\1\20\5\0\3\20\10\0\3\20\4\0\12\4\12\0\6\20\5\0"+
    "\22\20\3\0\30\20\1\0\11\20\1\0\1\20\2\0\7\20\37\0"+
    "\12\4\21\0\60\20\1\0\2\20\14\0\7\20\11\0\12\4\47\0"+
    "\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0"+
    "\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0"+
    "\2\20\1\0\4\20\1\0\2\20\11\0\1\20\2\0\5\20\1\0"+
    "\1\20\11\0\12\4\2\0\4\20\40\0\1\20\37\0\12\4\26\0"+
    "\10\20\1\0\44\20\33\0\5\20\163\0\53\20\24\0\1\20\12\4"+
    "\6\0\6\20\4\0\4\20\3\0\1\20\3\0\2\20\7\0\3\20"+
    "\4\0\15\20\14\0\1\20\1\0\12\4\6\0\46\23\1\0\1\23"+
    "\5\0\1\23\2\0\53\20\1\0\u014d\20\1\0\4\20\2\0\7\20"+
    "\1\0\1\20\1\0\4\20\2\0\51\20\1\0\4\20\2\0\41\20"+
    "\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\17\20"+
    "\1\0\71\20\1\0\4\20\2\0\103\20\45\0\20\20\20\0\126\23"+
    "\2\0\6\17\3\0\u026c\20\2\0\21\20\1\3\32\20\5\0\113\20"+
    "\6\0\10\20\7\0\15\20\1\0\4\20\16\0\22\20\16\0\22\20"+
    "\16\0\15\20\1\0\3\20\17\0\64\20\43\0\1\20\4\0\1\20"+
    "\3\0\12\4\46\0\12\4\6\0\130\20\10\0\5\20\2\0\42\20"+
    "\1\0\1\20\5\0\106\20\12\0\37\20\47\0\12\4\36\20\2\0"+
    "\5\20\13\0\54\20\4\0\32\20\6\0\12\4\46\0\27\20\11\0"+
    "\65\20\53\0\12\4\6\0\12\4\15\0\1\20\135\0\57\20\21\0"+
    "\7\20\4\0\12\4\51\0\36\20\15\0\2\20\12\4\54\20\32\0"+
    "\44\20\34\0\12\4\3\0\3\20\12\4\44\20\2\0\11\17\140\0"+
    "\4\20\1\0\4\20\3\0\2\20\11\0\300\17\100\0\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\11\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\11\17\10\23\6\17\2\0\6\23"+
    "\2\0\10\17\10\23\10\17\10\23\6\17\2\0\6\23\2\0\10\17"+
    "\1\0\1\23\1\0\1\23\1\0\1\23\1\0\1\23\10\17\10\23"+
    "\16\17\2\0\10\17\10\20\10\17\10\20\10\17\10\20\5\17\1\0"+
    "\2\17\4\23\1\20\1\0\1\17\3\0\3\17\1\0\2\17\4\23"+
    "\1\20\3\0\4\17\2\0\2\17\4\23\4\0\10\17\5\23\5\0"+
    "\3\17\1\0\2\17\4\23\1\20\3\0\13\3\35\0\1\30\1\30"+
    "\5\0\1\3\57\0\1\3\21\0\1\17\15\0\1\17\20\0\15\17"+
    "\145\0\1\23\4\0\1\23\2\0\1\17\3\23\2\17\3\23\1\17"+
    "\1\0\1\23\3\0\5\23\6\0\1\23\1\0\1\23\1\0\1\23"+
    "\1\0\4\23\1\0\1\17\4\23\1\17\4\20\1\17\2\0\2\17"+
    "\2\23\5\0\1\23\4\17\4\0\1\17\21\0\20\22\20\16\3\0"+
    "\1\23\1\17\u0331\0\32\22\32\16\u0716\0\57\23\1\0\57\17\1\0"+
    "\1\23\1\17\3\23\2\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\4\23\1\17\1\23\2\17\1\23\10\17\3\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\2\17\6\0\1\23\1\17\1\23"+
    "\1\17\3\0\1\23\1\17\14\0\46\17\1\0\1\17\5\0\1\17"+
    "\2\0\70\20\7\0\1\20\20\0\27\20\11\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\120\0\1\20\u01d0\0\1\3\4\0\2\20\52\0\5\20"+
    "\5\0\2\20\4\0\126\20\6\0\3\20\1\0\132\20\1\0\4\20"+
    "\5\0\51\20\3\0\136\20\21\0\33\20\65\0\20\20\u0200\0\u19b6\20"+
    "\112\0\u51d6\20\52\0\u048d\20\103\0\56\20\2\0\u010d\20\3\0\20\20"+
    "\12\4\2\20\24\0\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\20"+
    "\20\0\1\20\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\3\17"+
    "\2\0\106\20\61\0\11\20\2\0\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\3\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23"+
    "\12\17\1\23\1\17\1\23\1\17\2\23\1\17\1\23\1\17\1\23"+
    "\1\17\1\23\1\17\1\23\1\17\1\20\2\0\1\23\1\17\1\23"+
    "\1\17\1\20\1\23\1\17\1\23\3\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17\1\23\1\17"+
    "\1\23\1\17\1\23\1\17\1\23\1\17\5\23\1\0\5\23\1\17"+
    "\1\23\1\17\77\0\1\20\3\17\7\20\1\0\3\20\1\0\4\20"+
    "\1\0\27\20\35\0\64\20\16\0\62\20\34\0\12\4\30\0\6\20"+
    "\3\0\1\20\1\0\1\20\2\0\12\4\34\20\12\0\27\20\31\0"+
    "\35\20\7\0\57\20\34\0\1\20\12\4\6\0\5\20\1\0\12\20"+
    "\12\4\5\20\1\0\51\20\27\0\3\20\1\0\10\20\4\0\12\4"+
    "\6\0\27\20\3\0\1\20\3\0\62\20\1\0\1\20\3\0\2\20"+
    "\2\0\5\20\2\0\1\20\1\0\1\20\30\0\3\20\2\0\13\20"+
    "\7\0\3\20\14\0\6\20\2\0\6\20\2\0\6\20\11\0\7\20"+
    "\1\0\7\20\1\0\53\17\1\0\12\17\12\0\120\17\43\20\15\0"+
    "\12\4\6\0\u2ba4\20\14\0\27\20\4\0\61\20\u2104\0\u016e\20\2\0"+
    "\152\20\46\0\7\17\14\0\5\17\5\0\1\20\1\0\12\20\1\0"+
    "\15\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0"+
    "\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20\164\0"+
    "\5\20\1\0\207\20\23\0\12\4\7\0\32\23\6\0\32\17\13\0"+
    "\131\20\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\43\0"+
    "\14\20\1\0\32\20\1\0\23\20\1\0\2\20\1\0\17\20\2\0"+
    "\16\20\42\0\173\20\u0185\0\35\20\3\0\61\20\57\0\40\20\20\0"+
    "\21\20\1\0\10\20\6\0\46\20\12\0\36\20\2\0\44\20\4\0"+
    "\10\20\60\0\50\23\50\17\116\20\2\0\12\4\6\0\44\23\4\0"+
    "\44\17\4\0\50\20\10\0\64\20\234\0\u0137\20\11\0\26\20\12\0"+
    "\10\20\230\0\6\20\2\0\1\20\1\0\54\20\1\0\2\20\3\0"+
    "\1\20\2\0\27\20\12\0\27\20\11\0\37\20\101\0\23\20\1\0"+
    "\2\20\12\0\26\20\12\0\32\20\106\0\70\20\6\0\2\20\100\0"+
    "\1\20\17\0\4\20\1\0\3\20\1\0\33\20\54\0\35\20\3\0"+
    "\35\20\43\0\10\20\1\0\34\20\33\0\66\20\12\0\26\20\12\0"+
    "\23\20\15\0\22\20\156\0\111\20\67\0\63\23\15\0\63\17\u0310\0"+
    "\65\20\56\0\12\4\23\0\55\20\40\0\31\20\7\0\12\4\11\0"+
    "\44\20\17\0\12\4\20\0\43\20\3\0\1\20\14\0\60\20\16\0"+
    "\4\20\13\0\12\4\1\20\1\0\1\20\43\0\22\20\1\0\31\20"+
    "\124\0\7\20\1\0\1\20\1\0\4\20\1\0\17\20\1\0\12\20"+
    "\7\0\57\20\21\0\12\4\13\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20"+
    "\14\0\5\20\236\0\65\20\22\0\4\20\5\0\12\4\46\0\60\20"+
    "\24\0\2\20\1\0\1\20\10\0\12\4\246\0\57\20\51\0\4\20"+
    "\44\0\60\20\24\0\1\20\13\0\12\4\46\0\53\20\25\0\12\4"+
    "\66\0\32\20\26\0\12\4\u0166\0\40\23\40\17\12\4\25\0\1\20"+
    "\u01c0\0\71\20\u0107\0\11\20\1\0\45\20\21\0\1\20\17\0\12\4"+
    "\30\0\36\20\u0370\0\u039a\20\346\0\304\20\u0abc\0\u042f\20\u0fd1\0\u0247\20"+
    "\u21b9\0\u0239\20\7\0\37\20\1\0\12\4\146\0\36\20\22\0\60\20"+
    "\20\0\4\20\14\0\12\4\11\0\25\20\5\0\23\20\u0370\0\105\20"+
    "\13\0\1\20\102\0\15\20\100\0\1\20\37\0\u17ed\20\23\0\u02f3\20"+
    "\u250d\0\2\20\u0bfe\0\153\20\5\0\15\20\3\0\11\20\7\0\12\20"+
    "\u1766\0\32\23\32\17\32\23\7\17\1\0\22\17\32\23\32\17\1\23"+
    "\1\0\2\23\2\0\1\23\2\0\2\23\2\0\4\23\1\0\10\23"+
    "\4\17\1\0\1\17\1\0\7\17\1\0\13\17\32\23\32\17\2\23"+
    "\1\0\4\23\2\0\10\23\1\0\7\23\1\0\32\17\2\23\1\0"+
    "\4\23\1\0\5\23\1\0\1\23\3\0\7\23\1\0\32\17\32\23"+
    "\32\17\32\23\32\17\32\23\32\17\32\23\32\17\32\23\32\17\32\23"+
    "\34\17\2\0\31\23\1\0\31\17\1\0\6\17\31\23\1\0\31\17"+
    "\1\0\6\17\31\23\1\0\31\17\1\0\6\17\31\23\1\0\31\17"+
    "\1\0\6\17\31\23\1\0\31\17\1\0\6\17\1\23\1\17\2\0"+
    "\62\4\u1000\0\305\20\73\0\42\23\42\17\14\0\12\4\u04a6\0\4\20"+
    "\1\0\33\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0\12\20"+
    "\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0\4\20"+
    "\1\0\4\20\1\0\1\20\1\0\12\20\1\0\21\20\5\0\3\20"+
    "\1\0\5\20\1\0\21\20\u0274\0\32\22\6\0\32\22\6\0\32\22"+
    "\u0e76\0\ua6d7\20\51\0\u1035\20\13\0\336\20\2\0\u1682\20\u295e\0\u021e\20"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\5\6\1\7"+
    "\1\2\1\10\4\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\1\1\2\1\0"+
    "\1\32\4\6\2\0\3\6\1\33\2\6\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\5\6\1\42\1\6\1\43"+
    "\3\6\1\44\1\6\1\45\1\46\1\47\2\6\1\50"+
    "\2\6\1\51\1\52\1\6\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\140\0\140\0\140\0\140"+
    "\0\u0390\0\140\0\140\0\140\0\140\0\140\0\u03c0\0\u03f0"+
    "\0\140\0\140\0\140\0\140\0\u0420\0\u0450\0\u0480\0\360"+
    "\0\360\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0180\0\u0660\0\u0690\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\140\0\u07b0\0\u0180\0\u07e0\0\u0810\0\u0840\0\u0180\0\u0870"+
    "\0\u0180\0\u0180\0\u0180\0\u08a0\0\u08d0\0\u0180\0\u0900\0\u0930"+
    "\0\u0180\0\u0180\0\u0960\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\5\12\2\3\2\15\1\16\1\5\1\3"+
    "\1\17\1\5\1\20\1\12\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\27\46\1\47\14\46\1\3\13\46\62\0\1\5"+
    "\61\0\1\6\1\50\56\0\1\51\57\0\1\12\1\0"+
    "\1\12\1\52\6\12\1\0\3\12\1\0\1\12\5\0"+
    "\5\12\26\0\1\12\1\0\3\12\1\53\4\12\1\0"+
    "\3\12\1\0\1\12\5\0\5\12\26\0\1\12\1\0"+
    "\10\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\12\1\0\6\12\1\54\1\12\1\0\3\12\1\0"+
    "\1\12\5\0\5\12\26\0\1\12\1\0\5\12\1\55"+
    "\2\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\15\1\0\10\15\1\0\3\15\1\0\1\15\5\0"+
    "\5\15\23\0\2\56\3\0\10\56\1\0\2\56\2\0"+
    "\1\56\1\0\2\56\2\0\5\56\51\0\1\57\34\0"+
    "\1\12\1\0\2\12\1\60\1\61\4\12\1\0\3\12"+
    "\1\0\1\12\5\0\5\12\26\0\1\12\1\0\1\62"+
    "\3\12\1\63\3\12\1\0\3\12\1\0\1\12\5\0"+
    "\5\12\26\0\1\12\1\0\1\12\1\64\6\12\1\0"+
    "\3\12\1\0\1\12\5\0\5\12\26\0\1\12\1\0"+
    "\5\12\1\65\2\12\1\0\3\12\1\0\1\12\5\0"+
    "\5\12\60\0\1\66\50\0\1\67\101\0\1\70\57\0"+
    "\1\71\65\0\1\72\27\46\1\0\14\46\1\0\13\46"+
    "\44\0\1\73\17\0\1\12\1\0\2\12\1\74\5\12"+
    "\1\0\3\12\1\0\1\12\5\0\5\12\26\0\1\12"+
    "\1\0\1\75\4\12\1\76\2\12\1\0\3\12\1\0"+
    "\1\12\5\0\5\12\26\0\1\12\1\0\7\12\1\77"+
    "\1\0\3\12\1\0\1\12\5\0\5\12\26\0\1\12"+
    "\1\0\6\12\1\100\1\12\1\0\3\12\1\0\1\12"+
    "\5\0\5\12\46\0\1\101\33\0\1\57\1\4\1\5"+
    "\25\57\1\0\27\57\4\0\1\12\1\0\6\12\1\102"+
    "\1\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\12\1\0\10\12\1\0\3\12\1\0\1\12\5\0"+
    "\1\12\1\103\3\12\26\0\1\12\1\0\3\12\1\104"+
    "\4\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\12\1\0\10\12\1\0\3\12\1\0\1\12\5\0"+
    "\2\12\1\105\2\12\26\0\1\12\1\0\1\106\7\12"+
    "\1\0\3\12\1\0\1\12\5\0\5\12\26\0\1\12"+
    "\1\0\3\12\1\107\4\12\1\0\3\12\1\0\1\12"+
    "\5\0\5\12\26\0\1\12\1\0\2\12\1\110\5\12"+
    "\1\0\3\12\1\0\1\12\5\0\5\12\26\0\1\12"+
    "\1\0\10\12\1\0\3\12\1\0\1\12\5\0\4\12"+
    "\1\111\26\0\1\12\1\0\3\12\1\112\4\12\1\0"+
    "\3\12\1\0\1\12\5\0\5\12\26\0\1\12\1\0"+
    "\7\12\1\74\1\0\3\12\1\0\1\12\5\0\5\12"+
    "\26\0\1\12\1\0\6\12\1\113\1\12\1\0\3\12"+
    "\1\0\1\12\5\0\5\12\26\0\1\12\1\0\1\12"+
    "\1\114\6\12\1\0\3\12\1\0\1\12\5\0\5\12"+
    "\26\0\1\12\1\0\10\12\1\0\3\12\1\0\1\12"+
    "\5\0\1\115\4\12\26\0\1\12\1\0\5\12\1\116"+
    "\2\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\12\1\0\1\12\1\117\6\12\1\0\3\12\1\0"+
    "\1\12\5\0\5\12\26\0\1\12\1\0\5\12\1\120"+
    "\2\12\1\0\3\12\1\0\1\12\5\0\5\12\26\0"+
    "\1\12\1\0\1\121\7\12\1\0\3\12\1\0\1\12"+
    "\5\0\5\12\26\0\1\12\1\0\10\12\1\0\3\12"+
    "\1\0\1\12\5\0\1\122\4\12\26\0\1\12\1\0"+
    "\1\123\7\12\1\0\3\12\1\0\1\12\5\0\5\12"+
    "\26\0\1\12\1\0\3\12\1\124\4\12\1\0\3\12"+
    "\1\0\1\12\5\0\5\12\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\1\1\1\11\17\1\4\11\1\1"+
    "\5\11\2\1\4\11\3\1\1\0\5\1\2\0\6\1"+
    "\6\11\5\1\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* 
     * Código arbitrário pode ser inserido diretamente no analisador dessa forma. 
     * Aqui podemos declarar variáveis e métodos adicionais que julgarmos necessários. 
     */
    private int numberTokens;
    
    public int readedTokens(){
       return numberTokens;
    }

    private Token symbol( TOKEN_TYPE tokenType ) {
        numberTokens++;
        return new Token( tokenType, yytext(), yyline+1, yycolumn+1 );
    }

    private Token symbol( TOKEN_TYPE tokenType, Object value ) {
        numberTokens++;
        return new Token( tokenType, value, yyline+1, yycolumn+1 );
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      numberTokens = 0; // Isto é copiado direto no construtor do lexer. 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4990) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 44: break;
          case 2: 
            { throw new RuntimeException("Illegal character <"+yytext()+"> at " + yyline + ":" + yycolumn);
            } 
            // fall through
          case 45: break;
          case 3: 
            { /* Não faz nada  */
            } 
            // fall through
          case 46: break;
          case 4: 
            { return symbol(TOKEN_TYPE.NUM, Integer.parseInt(yytext()) );
            } 
            // fall through
          case 47: break;
          case 5: 
            { return symbol(TOKEN_TYPE.DOT);
            } 
            // fall through
          case 48: break;
          case 6: 
            { return symbol(TOKEN_TYPE.ID);
            } 
            // fall through
          case 49: break;
          case 7: 
            { return symbol(TOKEN_TYPE.TYPE);
            } 
            // fall through
          case 50: break;
          case 8: 
            { return symbol(TOKEN_TYPE.MINUS);
            } 
            // fall through
          case 51: break;
          case 9: 
            { return symbol(TOKEN_TYPE.COLON);
            } 
            // fall through
          case 52: break;
          case 10: 
            { return symbol(TOKEN_TYPE.LPAR);
            } 
            // fall through
          case 53: break;
          case 11: 
            { return symbol(TOKEN_TYPE.RPAR);
            } 
            // fall through
          case 54: break;
          case 12: 
            { return symbol(TOKEN_TYPE.LBRACK);
            } 
            // fall through
          case 55: break;
          case 13: 
            { return symbol(TOKEN_TYPE.RBRACK);
            } 
            // fall through
          case 56: break;
          case 14: 
            { return symbol(TOKEN_TYPE.LBRACE);
            } 
            // fall through
          case 57: break;
          case 15: 
            { return symbol(TOKEN_TYPE.RBRACE);
            } 
            // fall through
          case 58: break;
          case 16: 
            { return symbol(TOKEN_TYPE.GT);
            } 
            // fall through
          case 59: break;
          case 17: 
            { return symbol(TOKEN_TYPE.LT);
            } 
            // fall through
          case 60: break;
          case 18: 
            { return symbol(TOKEN_TYPE.SEMI);
            } 
            // fall through
          case 61: break;
          case 19: 
            { return symbol(TOKEN_TYPE.COMMA);
            } 
            // fall through
          case 62: break;
          case 20: 
            { return symbol(TOKEN_TYPE.EQ);
            } 
            // fall through
          case 63: break;
          case 21: 
            { return symbol(TOKEN_TYPE.NOT);
            } 
            // fall through
          case 64: break;
          case 22: 
            { return symbol(TOKEN_TYPE.PLUS);
            } 
            // fall through
          case 65: break;
          case 23: 
            { return symbol(TOKEN_TYPE.TIMES);
            } 
            // fall through
          case 66: break;
          case 24: 
            { return symbol(TOKEN_TYPE.DIV);
            } 
            // fall through
          case 67: break;
          case 25: 
            { return symbol(TOKEN_TYPE.MOD);
            } 
            // fall through
          case 68: break;
          case 26: 
            { return symbol(TOKEN_TYPE.NUM, Double.parseDouble(yytext()) );
            } 
            // fall through
          case 69: break;
          case 27: 
            { return symbol(TOKEN_TYPE.IF);
            } 
            // fall through
          case 70: break;
          case 28: 
            { return symbol(TOKEN_TYPE.COLONCOLON);
            } 
            // fall through
          case 71: break;
          case 29: 
            { yybegin(COMMENT);
            } 
            // fall through
          case 72: break;
          case 30: 
            { return symbol(TOKEN_TYPE.EQEQ);
            } 
            // fall through
          case 73: break;
          case 31: 
            { return symbol(TOKEN_TYPE.NE);
            } 
            // fall through
          case 74: break;
          case 32: 
            { return symbol(TOKEN_TYPE.AND);
            } 
            // fall through
          case 75: break;
          case 33: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 76: break;
          case 34: 
            { return symbol(TOKEN_TYPE.CHR, yytext().substring(1, yytext().length()-1) );
            } 
            // fall through
          case 77: break;
          case 35: 
            { return symbol(TOKEN_TYPE.NEW);
            } 
            // fall through
          case 78: break;
          case 36: 
            { return symbol(TOKEN_TYPE.LOG, Boolean.parseBoolean(yytext()) );
            } 
            // fall through
          case 79: break;
          case 37: 
            { return symbol(TOKEN_TYPE.READ);
            } 
            // fall through
          case 80: break;
          case 38: 
            { return symbol(TOKEN_TYPE.ELSE);
            } 
            // fall through
          case 81: break;
          case 39: 
            { return symbol(TOKEN_TYPE.NULL);
            } 
            // fall through
          case 82: break;
          case 40: 
            { return symbol(TOKEN_TYPE.DATA);
            } 
            // fall through
          case 83: break;
          case 41: 
            { return symbol(TOKEN_TYPE.PRINT);
            } 
            // fall through
          case 84: break;
          case 42: 
            { return symbol(TOKEN_TYPE.RETURN);
            } 
            // fall through
          case 85: break;
          case 43: 
            { return symbol(TOKEN_TYPE.ITERATE);
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
